[project]
name = "diversifier"
version = "0.1.0"
description = "AI-powered tool to generate diversified project variants via dependency mutation."
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "langchain>=0.3.27",
    "langchain-openai>=0.2.14",
    "mcp>=1.1.0",
    "docker>=7.1.0",
    "langgraph>=0.6.4",
    "gitpython>=3.1.45",
    "langchain-anthropic>=0.3.18",
    "langchain-google-genai>=2.1.9",
]

[project.scripts]
diversifier = "src.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
package = true

[dependency-groups]
dev = [
    "black>=25.1.0",
    "ruff>=0.9.0",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.25.0",
    "pytest-timeout>=2.1.0",
    "types-docker>=7.1.0.20241217",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--timeout=300",
    "--timeout-method=signal",
    "-v"
]

# Ruff configuration - replaces flake8
[tool.ruff]
# Python version compatibility
target-version = "py313"

# Include all directories that were checked by flake8
include = ["src/**/*.py", "tests/**/*.py", "main.py"]

# Lint configuration
[tool.ruff.lint]
# Select rules equivalent to flake8 --select F plus import-in-functions validation
# F = Pyflakes (all F-rules that flake8 was checking)
# E402 = Module level import not at top of file (import-in-functions validation)
select = [
    "F",     # Pyflakes - equivalent to flake8 --select F
    "E402",  # Module level import not at top of file (import-in-functions)
]

# Skip minor warnings, only show errors
# These are typically stylistic issues that don't affect functionality
ignore = [
    # Skip warnings that are not critical errors
    "E501",  # Line too long (handled by black formatter)
]

# Make import fixes safe by default
extend-safe-fixes = ["F401", "F811"]

# Don't auto-fix these rules to avoid breaking imports accidentally
unfixable = ["F401", "F811"]  # Prevent auto-removal of imports that might break functionality

# Per-file ignore rules
[tool.ruff.lint.per-file-ignores]
# Allow unused imports in __init__.py files (common for re-exports)
"__init__.py" = ["F401", "F403"]
# Allow imports not at top in test files (common pattern for pytest fixtures)
"tests/**" = ["E402"]

# Additional configuration for import checking
[tool.ruff.lint.isort]
# Ensure imports are properly organized
known-first-party = ["src"]

[tool.ruff.lint.pyflakes]
# Configure pyflakes for strict import checking
# Allow some specific imports that may appear unused but are intentional
allowed-unused-imports = []  # Strict mode - flag all unused imports

